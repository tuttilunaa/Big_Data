//Import with Google drive 
from google.colab import drive 
drive.mount('/content/drive') 
//Installing Necessary Libraries 
pip install rpforest pip install 
scikit-surprise 
//Importing Essentials Libraries 
import numpy as np import 
pandas as pd import seaborn as 
sns import numpy import 
threading import csv import 
numpy import csv import 
threading import pandas as pd 
from rpforest import RPForest 
import threading import sys 
importmatplotlib.pyplot as plt
%matplotlib inline 
//Input a=pd.read_csv('Breastcancer.csv') 
a1=pd.read_csv('Image_seg.csv') 
a2=pd.read_csv('Parkinsons.csv') a.head(20) 
a1.head(20) a2.head(20) 
b=pd.read_csv('arcene.csv') b.head(20) 
b=pd.read_csv('musk.csv') b.head(20) 
b=pd.read_csv('sensor.csv') b.head(20) 
b=pd.read_csv('smart.csv') b.head(20) 
b=pd.read_csv('slice_localization_data.csv') 
b.head(20) 
def leaves(predict, leaf): 
treeleaves = predict[0:leaf] 
return treeleaves
//To calculate Miss rate defmissrateav(n, k, 
model, data, labels, leaf): 
miss = 0 
fori in range(n): 
count = 0 predict = model.get_candidates(data[i], number=k, 
normalise=False) treeleaves = leaves(predict, leaf) for j in 
range(leaf): if labels[treeleaves[j]] == labels[i]: 
count = count + 1 if 
count < k: 
miss = miss + k - count return 
miss / (n*k) 
//To calculate Distance Error 
defdiscrepancyav(n, k, model, data): 
dist = 0 for i in range(n): 
predict = model.get_candidates(data[i], number=k, normalise=False) 
dist = dist + numpy.linalg.norm(data[i] - data[predict[k-1]]) return dist / 
n 
def evaluate(data, labels, n, k, t, leaf, steps, runs, avmra, avdia): 
globalrc for r in range(runs): // To create 
empty matrix mra = 
numpy.empty(steps, dtype=float) dia = 
numpy.empty(steps, dtype=float) for i 
in range(steps): 
model = RPForest(leaf_size=leaf, no_trees=t) 
model.fit(data, normalise=False) miss = 0 
mra[i] = missrateav(n, k, model, data, labels, leaf) 
dia[i] = discrepancyav(n, k, model, data) 
model.clear() if t == 100: 
 t = 10 
elifi == 0: 
t = t + 10 
else: 
 t = t + 20 
for w in range(steps): 
avmra[w] = avmra[w] + mra[w] 
avdia[w] = avdia[w] + dia[w] rc = 
rc + 1 if rc == 1: 
print(str(rc) + ' Execution Out of ' + str(run) + ' Completed Successfully!') 
else: 
print(str(rc) + ' Executions Out of ' + str(run) + ' Completed Successfully!') 
//MinMax Normalization â€“ to normalize distance error 
defnormalise(avdia, avdiatemp, steps): minim = 
numpy.min(avdiatemp) maxim = 
numpy.max(avdiatemp) for s in range(steps): 
avdia[s] = (avdiatemp[s] - minim) / (maxim - minim) 
//to convert string to float defread_lines(): 
with open('Breastcancer.csv', 'r') as data1: 
labels = csv.reader(data1) 
for row in labels: 
yield [ float(i) for i in row ] 
//BreastCancer dataset print('K Nearest Neighbour Search Using Random 
Projection Forests - Breast C ancer') labels = list(read_lines()) n = data1.shape[0] 
k = 5 t = 10 leaf = 20 steps = 5 run = 100 threads = 4 rc = 10 t1avmra = 
numpy.zeros(steps, dtype=float) t1avdia = numpy.zeros(steps, dtype=float) 
t2avmra = numpy.zeros(steps, dtype=float) t2avdia = numpy.zeros(steps, 
dtype=float) t3avmra = numpy.zeros(steps, dtype=float) t3avdia = 
numpy.zeros(steps, dtype=float) t4avmra = numpy.zeros(steps, dtype=float) 
t4avdia = numpy.zeros(steps, dtype=float) avmra = numpy.zeros(steps, 
dtype=float) avdiatemp = numpy.zeros(steps, dtype=float) avdia = 
numpy.zeros(steps, dtype=float) print('Evaluating The Method...') t1 = 
threading.Thread(target=evaluate, args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t1avmra, t1avdia)) 
t2 = threading.Thread(target=evaluate, args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t2avmra, t2avdia)) t3 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t3avmra, t3avdia)) t4 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t4avmra, t4avdia)) 
t1.start() t2.start() t3.start() 
t4.start() t1.join() t2.join() 
t3.join() t4.join() for i in 
range(steps): 
avmra[i] = t1avmra[i] + t2avmra[i] + t3avmra[i] + t4avmra[i] 
avdiatemp[i] = t1avdia[i] + t2avdia[i] + t3avdia[i] + t4avdia[i] for j 
in range(steps): 
avmra[j] = avmra[j] / rcavdiatemp[j] = avdiatemp[j] / rc normalise(avdia, 
avdiatemp, steps) print('Operation Completed Successfully!') print('Average 
Missing Rate For Different Number of Trees in The Forest:') print(avmra) 
print('Average Discrepancy For Different Number of Trees in The Forest:') 
print(avdia) print('All Operations Completed Successfully') 
//Parkinsons Dataset print('KNN Search Using Random Projection ForestsParkinsons') data1 = numpy.loadtxt('park1.csv', dtype=str,delimiter=',') labels = 
list(csv.reader(open('park1.csv', 'r'))) n = data1.shape[0] k = 5 t = 10 leaf = 20 
steps = 5 run = 100 threads = 4 rc = 10 t1avmra = numpy.zeros(steps, 
dtype=float) t1avdia = numpy.zeros(steps, dtype=float) t2avmra = 
numpy.zeros(steps, dtype=float) t2avdia = numpy.zeros(steps, dtype=float) 
t3avmra = numpy.zeros(steps, dtype=float) t3avdia = numpy.zeros(steps, 
dtype=float) t4avmra = numpy.zeros(steps, dtype=float) t4avdia = 
numpy.zeros(steps, dtype=float) avmra = numpy.zeros(steps, dtype=float) 
avdiatemp = numpy.zeros(steps, dtype=float) avdia = numpy.zeros(steps, 
dtype=float) print('Evaluating The Method...') t1 = 
threading.Thread(target=evaluate, args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t1avmra, t1avdia)) t2 = threading.Thread(target=evaluate,
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t2avmra, t2avdia)) 
t3 = threading.Thread(target=evaluate, args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t3avmra, t3avdia)) t4 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t4avmra, t4avdia)) 
t1.start() t2.start() t3.start() 
t4.start() t1.join() t2.join() 
t3.join() t4.join() for i in 
range(steps): 
avmra[i] = t1avmra[i] + t2avmra[i] + t3avmra[i] + t4avmra[i] 
avdiatemp[i] = t1avdia[i] + t2avdia[i] + t3avdia[i] + t4avdia[i] for j 
in range(steps): 
avmra[j] = avmra[j] / rcavdiatemp[j] = avdiatemp[j] / rc normalise(avdia, 
avdiatemp, steps) print('Operation Completed Successfully!') print('Average 
Missing Rate For Different Number of Trees in The Forest:') print(avmra) 
print('Average Discrepancy For Different Number of Trees in The Forest:') 
print(avdiatem) print('All Operations Completed Successfully') 
print('KNN Search Using Random Projection Forests- Slice Localisation') data1 
= numpy.loadtxt('slice_localization_data.csv', dtype=str,delimiter=',') labels = 
list(csv.reader(open('slice_localization_data.csv', 'r'))) 
n = data1.shape[0] k = 5 t = 10 leaf = 20 steps = 5 run = 100 threads = 4 rc = 10 
t1avmra = numpy.zeros(steps, dtype=float) t1avdia = numpy.zeros(steps, 
dtype=float) t2avmra = numpy.zeros(steps, dtype=float) t2avdia = 
numpy.zeros(steps, dtype=float) t3avmra = numpy.zeros(steps, dtype=float) 
t3avdia = numpy.zeros(steps, dtype=float) t4avmra = numpy.zeros(steps, 
dtype=float) t4avdia = numpy.zeros(steps, dtype=float) avmra = 
numpy.zeros(steps, dtype=float)avdiatemp = numpy.zeros(steps, dtype=float) 
avdia = numpy.zeros(steps, dtype=float) print('Evaluating The Method...') t1 = 
threading.Thread(target=evaluate, args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t1avmra, t1avdia)) t2 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t2avmra, t2avdia)) t3 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t3avmra, t3avdia)) t4 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t4avmra, t4avdia)) t1.start()
t2.start() t3.start() 
t4.start() t1.join() 
t2.join() t3.join() 
t4.join() for i in 
range(steps): 
avmra[i] = t1avmra[i] + t2avmra[i] + t3avmra[i] + t4avmra[i] 
avdiatemp[i] = t1avdia[i] + t2avdia[i] + t3avdia[i] + t4avdia[i] for j 
in range(steps): 
avmra[j] = avmra[j] / rcavdiatemp[j] = avdiatemp[j] / rc normalise(avdia, 
avdiatemp, steps) print('Operation Completed Successfully!') print('Average 
Missing Rate For Different Number of Trees in The Forest:') print(avmra) 
print('Average Discrepancy For Different Number of Trees in The Forest:') 
print(avdiatem) print('All Operations Completed Successfully') 
//Smartphone dataset
Start=datetime.datetime.now();
print('KNN Search Using Random Projection Forests- Smartphone Activity') 
data1 = numpy.loadtxt('smartphone.csv', dtype=str,delimiter=',') labels = 
list(csv.reader(open('slice_localization_data.csv', 'r'))) 
n = data1.shape[0] 
k = 5
t = 10 
leaf = 20 
steps = 5 
run = 100 
threads = 4
rc = 10 t1avmra = numpy.zeros(steps, dtype=float) t1avdia = numpy.zeros(steps, 
dtype=float) t2avmra = numpy.zeros(steps, dtype=float) t2avdia = 
numpy.zeros(steps, dtype=float) t3avmra = numpy.zeros(steps, dtype=float) 
t3avdia = numpy.zeros(steps, dtype=float) t4avmra = numpy.zeros(steps, 
dtype=float) t4avdia = numpy.zeros(steps, dtype=float) avmra = 
numpy.zeros(steps, dtype=float) avdiatemp = numpy.zeros(steps, dtype=float) 
avdia = numpy.zeros(steps, dtype=float) print('Evaluating The Method...') t1 = 
threading.Thread(target=evaluate, args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t1avmra, t1avdia)) t2 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t2avmra, t2avdia)) t3 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t3avmra, t3avdia)) t4 = threading.Thread(target=evaluate, 
args=(data1, labels, n, k, t, leaf, steps, int
(run / threads), t4avmra, t4avdia)) 
t1.start() t2.start() t3.start() 
t4.start() t1.join() t2.join() 
t3.join() t4.join() for 
i in range(steps): 
avmra[i] = t1avmra[i] + t2avmra[i] + t3avmra[i] + t4avmra[i] 
avdiatemp[i] = t1avdia[i] + t2avdia[i] + t3avdia[i] + t4avdia[i] for j 
in range(steps): 
avmra[j] = avmra[j] / rcavdiatemp[j] = avdiatemp[j] / rc normalise(avdia, 
avdiatemp, steps) print('Operation Completed Successfully!') print('Average 
Missing Rate For Different Number of Trees in The Forest:') print(avmra) 
print('Average Discrepancy For Different Number of Trees in The Forest:') 
print(avdiatem) print('All Operations Completed Successfully') 
end=datetime.datetime.now()
mid=end-start
//to plot average missing rate import 
matplotlib.pyplot as plt x1 = 
[10,20,40,60,80] y1 = 
avmraplt.plot(x1, y1, label = 
"Wdbc") x2 = [10,20,40,60,80] y2 = 
avmraplt.plot(x2, y2, label = 
"Parkinsons") x3 = [10,20,40,60,80] 
y3=avmra1 
plt.plot(x3, y3, label = "Smartphone") 
x3 = [10,20,40,60,80] y3=avmra1 
plt.plot(x3, y3, label = "Slice 
Localisation")plt.xlabel('number of 
trees(K=5)') plt.ylabel('avg missing 
rate')plt.legend() plt.show() 
//to plot average distance error import 
matplotlib.pyplot as plt x1 = 
[10,20,40,60,80] y1 = avdiatemplt.plot(x1, 
y1, label = "Wdbc") x2 = [10,20,40,60,80] 
y2 = avdiatemplt.plot(x2, y2, label = 
"Parkinsons") x3 = [10,20,40,60,80] 
y3=avdia1 plt.plot(x3, y3, label = 
"Smartphone") x3 = [10,20,40,60,80] 
y3=avdia1 plt.plot(x3, y3, label = "Slice 
Localisation") plt.xlabel('number of 
trees(K=5)') plt.ylabel('avg distance error') 
plt.legend() plt.show() 
//to plot runtime
import numpy as np
import matplotlib.pyplot as plt
X = ['Smartphone']
RpForest = [mid]
Covertree = [5]
X_axis = np.arange(len(X))
plt.bar(X_axis - 0.2, RpForest, 0.4, label = 
'Rp Forest')
plt.bar(X_axis + 0.2, Covertree, 0.4, label = 
'Covertree')
plt.xticks(X_axis, X)
plt.xlabel("Datasets")
plt.ylabel("Running Time")
plt.legend()
plt.show()
